{"_id":"note:UGIZicb1es","title":"Deformable DETR","content":"# DEFORMABLE DETR 论文阅读笔记\n\n>Shamshad F, Khan S, Zamir S W, et al. Transformers in medical imaging: A survey[J]. Medical Image Analysis, 2023: 102802.\n\n## 1.摘要\n\n目标检测是安防监控，自动驾驶，人脸识别等领域内最为重要的一个课题。最近提出的DETR在展示良好性能的同时，消除了对许多手工设计的目标检测组件的需求。然而，由于Transformer注意力模块在处理图像特征映射时的局限性，它的收敛速度慢，特征空间分辨率有限。为了解决这些问题，本文提出了Deformable DETR，其注意力模块只关注参考目标周围的一小部分关键采样点。除此之外，在不使用FPN架构的情况下，该模块可以聚合多尺度特征，从而更好的检测微小目标。Deformable DETR可以比DETR获得更好的性能，训练次数减少10倍。在COCO基准数据集上的实验证明了本文的方法的有效性。\n\n## 2.METHOD\n\n### Deformable Attention Module\n\n给定一个特征图$x\\in\\mathbb{R}^{C\\times H\\times W}$,设$q$索引一个具有内容特征$z_q$和二维参考点$p_q$的查询元素，可变形注意力特征计算式为\n\n$$\n\\operatorname{DeformAttn}(z_q,\\boldsymbol{p}_q,\\boldsymbol{x})=\\sum_{m=1}^M\\boldsymbol{W}_m\\big[\\sum_{k=1}^KA_{mqk}\\cdot\\boldsymbol{W}_m'x(\\boldsymbol{p}_q+\\Delta\\boldsymbol{p}_{mqk})\\big]\n$$\n\n其中，其中，$m$表示注意头，$k$表示采样键数，$K$是总采样键数($k<<HW$)。上面这个版本是针对单个特征图的，如果是多尺度的话，会有另外一个版本。在代码实现中，将查询特征$z_q$馈送给$3MK$个通道的线性投影算子，其中前$2MK$个通道编码采样偏移量$∆p_{mqk}$，剩余的MK个通道馈送给softmax算子获得注意权值$A_{mqk}$\n\n对上面这个公式进行复杂度分析：\n\n- 得到坐标偏移和权重需要花$O(3N_{q}CMK)$\n- 将Query,Key进行降维需要$O(N_qC^2)$\n- 有两种对Value降维的方式：\n    - 第一种是对整个特征图进行降维，需要的计算量是$O(HWC^2)$\n    - 第二种是仅针对部分采样点进行降维，需要的计算是$O(N_qKC^2)$\n- 由于采样点是小数，所以还需要进行双线性插值，这里的复杂度是$O(5N_{q}KC)$\n\n### Multi-scale Deformable Attention Module.\n\n和上面的公式类似，这里是使用了不同的尺度的特征图进行操作。\n\n$$\n\n\\operatorname{MSDeformAtn}(z_{q},\\hat{p}_{q},\\{x^{l}\\}_{l=1}^{L})=\\sum_{m=1}^{M}\\boldsymbol{W}_{m}\\big[\\sum_{l=1}^{L}\\sum_{k=1}^{K}A_{mlqk}\\cdot\\boldsymbol{W}_{m}^{\\prime}\\boldsymbol{x}^{l}(\\phi_{l}(\\hat{p}_{q})+\\Delta\\boldsymbol{p}_{mlqk})\\big]\n\n$$\n\n其中$\\phi$表示图像的上采样操作。\n\n### Deformable Transformer Encoder\n\n这里作者多尺度特征图的来源是使用ResNet-50，具体的操作是从第三层开始取四个特征图，最后一个特征图是在第五个特征图的基础上用Conv（3×3,stride=2）的卷积得到的.\n\n![](https://github.com/1248818919/My_NOTE/blob/master/assets/Computer_Vision/Detect%20and%20Segment/Deformable%20DETR/pic1.jpg?raw=true)\n\n在编码器中应用多尺度可变形注意模块，输出是与输入分辨率相同的多尺度特征图。键和查询元素都是来自多尺度特征图的像素。对于每个查询像素，参考点是其本身。为了识别每个查询像素所处的特征级别，除了位置嵌入之外，我们还在特征表示中添加了一个尺度级嵌入，表示为$e_l$。与固定编码的位置嵌入不同，尺度级嵌入${e_l}^L_{l=1}$是随机初始化的，并与网络共同训练。\n\n### Iterative Bounding Box Refinement\n\n每个解码器层基于前一层的预测来细化边界框。\n![](https://github.com/1248818919/My_NOTE/blob/master/assets/Computer_Vision/Detect%20and%20Segment/Deformable%20DETR/pic2.jpg?raw=true)\n\n## 3.Code\n\n### 3.1 Backbone\n\n上节提到了作者提出的Deformable Attention模块，可以很方便的处理多尺度特征。于是Deformable DETR在backbone（ResNet50）部分会提取不同尺度的特征，总共会提取4层。如下图，前三层分别来自ResNet50的Layer2-4，下采样率分别为8、16、32，再分别接一个1x1卷积+GroupNorm，将特征统一降维到256。第三层来自Layer4，经过一个3x3卷积 + GroupNorm，得到下采样率为64、将维到256的特征。\n\n\n![](https://github.com/1248818919/My_NOTE/blob/master/assets/Computer_Vision/Detect%20and%20Segment/Deformable%20DETR/pic1.jpg?raw=true)\n\n源码其实很简单，重新定义return_layers ，再调用torchvision.models._utils下的IntermediateLayerGetter函数抽取得到Layer2-4这三个不同尺度的输出特征图，代码backbone.py中：\n\n\n    class BackboneBase(nn.Module):\n\n        def __init__(self, backbone: nn.Module, train_backbone: bool, return_interm_layers: bool):\n            super().__init__()\n            for name, parameter in backbone.named_parameters():\n                if not train_backbone or 'layer2' not in name and 'layer3' not in name and 'layer4' not in name:\n                    parameter.requires_grad_(False)\n            if return_interm_layers:\n                # return_layers = {\"layer1\": \"0\", \"layer2\": \"1\", \"layer3\": \"2\", \"layer4\": \"3\"}\n                return_layers = {\"layer2\": \"0\", \"layer3\": \"1\", \"layer4\": \"2\"}\n                self.strides = [8, 16, 32]\n                self.num_channels = [512, 1024, 2048]\n            else:\n                return_layers = {'layer4': \"0\"}\n                self.strides = [32]\n                self.num_channels = [2048]\n            self.body = IntermediateLayerGetter(backbone, return_layers=return_layers)\n\n        def forward(self, tensor_list: NestedTensor):\n            # 输入特征图  [bs, C, H, W]  ->  返回ResNet50中 layer2 layer3 layer4层的输出特征图\n            # 0 = [bs, 512, H/8, W/8]  1 = [bs, 1024, H/16, W/16]  2 = [bs, 2048, H/32, W/32]\n            xs = self.body(tensor_list.tensors)\n            out: Dict[str, NestedTensor] = {}\n            for name, x in xs.items():\n                m = tensor_list.mask\n                assert m is not None\n                # 原图片mask下采样8、16、32倍\n                mask = F.interpolate(m[None].float(), size=x.shape[-2:]).to(torch.bool)[0]\n                out[name] = NestedTensor(x, mask)\n            # 3个不同尺度的输出特征和mask  dict: 3\n            # 0: tensors[bs, 512, H/8, W/8]  mask[bs, H/8, W/8]\n            # 1: tensors[bs, 1024, H/16, W/16]  mask[bs, H/16, W/16]\n            # 3: tensors[bs, 2048, H/32, W/32]  mask[bs, H/32, W/32]\n            return out\n\n另外在deformable_detr.py中DeformableDETR类进一步使用这三个不同尺度的特征，分别接一个1x1conv + GroupNorm，再进一步Layer4接一个3x3conv + GroupNorm下采样，最后得到四个不同尺度的特征图：\n\n    class DeformableDETR(nn.Module):\n        \"\"\" This is the Deformable DETR module that performs object detection \"\"\"\n        def __init__(self, backbone, transformer, num_classes, num_queries, num_feature_levels,\n                     aux_loss=True, with_box_refine=False, two_stage=False):\n            ...\n            # 3个1x1conv + 1个3x3conv\n            if num_feature_levels > 1:\n                num_backbone_outs = len(backbone.strides)\n                input_proj_list = []\n                for _ in range(num_backbone_outs):            # 3个1x1conv\n                    in_channels = backbone.num_channels[_]    # 512  1024  2048\n                    input_proj_list.append(nn.Sequential(     # conv1x1  -> 256 channel\n                        nn.Conv2d(in_channels, hidden_dim, kernel_size=1),\n                        nn.GroupNorm(32, hidden_dim),\n                    ))\n                for _ in range(num_feature_levels - num_backbone_outs):   # 1个3x3conv\n                    input_proj_list.append(nn.Sequential(\n                        nn.Conv2d(in_channels, hidden_dim, kernel_size=3, stride=2, padding=1),  # 3x3conv s=2 -> 256channel\n                        nn.GroupNorm(32, hidden_dim),\n                    ))\n                    in_channels = hidden_dim\n                self.input_proj = nn.ModuleList(input_proj_list)\n            else:\n                self.input_proj = nn.ModuleList([\n                    nn.Sequential(\n                        nn.Conv2d(backbone.num_channels[0], hidden_dim, kernel_size=1),\n                        nn.GroupNorm(32, hidden_dim),\n                    )])\n            ...\n        def forward(self, samples: NestedTensor):\n            ...\n            # 经过backbone resnet50  输出三个尺度的特征信息  features list:3  NestedTensor\n            # 0 = mask[bs, W/8, H/8]     tensors[bs, 512, W/8, H/8]\n            # 1 = mask[bs, W/16, H/16]   tensors[bs, 1024, W/16, H/16]\n            # 2 = mask[bs, W/32, H/32]   tensors[bs, 2048, W/32, H/32]\n            # pos: 3个不同尺度的特征对应的3个位置编码(这里一步到位直接生成经过1x1conv降维后的位置编码)\n            # 0: [bs, 256, H/8, W/8]  1: [bs, 256, H/16, W/16]  2: [bs, 256, H/32, W/32]\n            features, pos = self.backbone(samples)\n\n            # 前三个1x1conv + GroupNorm 前向传播\n            srcs = []\n            masks = []\n            for l, feat in enumerate(features):\n                src, mask = feat.decompose()\n                srcs.append(self.input_proj[l](src))  # 1x1 降维度 -> 256\n                masks.append(mask)  # mask shape不变\n                assert mask is not None\n\n            # 最后一层特征 -> conv3x3 + GroupNorm 前向传播\n            if self.num_feature_levels > len(srcs):\n                _len_srcs = len(srcs)\n                for l in range(_len_srcs, self.num_feature_levels):\n                    if l == _len_srcs:\n                        # C5层输出 bs x 2048 x H/32 x W/32 x  -> bs x 256 x H/64 x W/64     3x3Conv s=2\n                        src = self.input_proj[l](features[-1].tensors)\n                    else:\n                        src = self.input_proj[l](srcs[-1])\n                    m = samples.mask\n                    # 这一层的特征图shape变为原来一半   mask shape也要变为原来一半  [bs, H/32, H/32] -> [bs, H/64, W/64]\n                    mask = F.interpolate(m[None].float(), size=src.shape[-2:]).to(torch.bool)[0]\n                    # 生成这一层的位置编码  [bs, 256, H/64, W/64]\n                    pos_l = self.backbone[1](NestedTensor(src, mask)).to(src.dtype)\n                    srcs.append(src)\n                    masks.append(mask)\n                    pos.append(pos_l)\n\n            # 到了这一步就完成了全部的backbone的前向传播了  最终生成4个不同尺度的特征srcs已经对应的mask和位置编码pos\n            # srcs:  list4  0=[bs,256,H/8,W/8] 1=[bs,256,H/16,W/16] 2=[bs,256,H/32,W/32] 3=[bs,256,H/64,W/64]\n            # masks: list4  0=[bs,H/8,W/8] 1=[bs,H/16,W/16] 2=[bs,H/32,W/32] 3=[bs,H/64,W/64]\n            # pos:   list4  0=[bs,256,H/8,W/8] 1=[bs,256,H/16,W/16] 2=[bs,256,H/32,W/32] 3=[bs,256,H/64,W/64]\n\n### 3.2 多尺度位置编码\n\n想要用这4个不同尺度的特征图，还有一个问题：位置编码问题。我们知道，DETR的使用的是单尺度特征，而且使用的是三角函数，不同位置的（x、y）坐标会生成不同的位置编码，这肯定没问题！\n\n但是Deformable DETR是使用了4个不同尺度的特征，如果还是用原来的方法，那么在这些不同尺度的特征中，位于相同位置(x、y)坐标的位置会产生相同的位置编码，所以这个方法就无法区分这些不同特征相同位置的位置编码了。\n\n针对这个问题，作者提出了一个’scale-level embedding’的变量，可以用来解决这个问题：区分不同特征相同位置的位置编码。源码在deformable_transformer.py的DeformableTransformer中定义了一个level_embed变量，然后在每一层的原始位置编码（pos_embed）的基础上加上对应的Scale-Level Embedding（level_embed ）注意，每一层所有位置加上相同的level_embed 且 不同层的level_embed不同：\n\n    class DeformableTransformer(nn.Module):\n        def __init__(self, d_model=256, nhead=8,\n                     num_encoder_layers=6, num_decoder_layers=6, dim_feedforward=1024, dropout=0.1,\n                     activation=\"relu\", return_intermediate_dec=False,\n                     num_feature_levels=4, dec_n_points=4,  enc_n_points=4,\n                     two_stage=False, two_stage_num_proposals=300):\n            super().__init__()\n            ...\n            # scale-level position embedding  [4, 256]  可学习的\n            # 因为deformable detr用到了多尺度特征  经过backbone会生成4个不同尺度的特征图  但是如果还是使用原先的sine position embedding\n            # detr是针对h和w进行编码的 不同位置的特征点会对应不同的编码值 但是deformable detr不同的特征图的不同位置就有可能会产生相同的位置编码，就无法区分了\n            # 为了解决这个问题，这里引入level_embed这个遍历  不同层的特征图会有不同的level_embed 再让原先的每层位置编码+每层的level_embed\n            # 这样就很好的区分不同层的位置编码了  而且这个level_embed是可学习的\n            self.level_embed = nn.Parameter(torch.Tensor(num_feature_levels, d_model))\n            ...\n        def forward(self, srcs, masks, pos_embeds, query_embed=None):\n            ...\n            for lvl, (src, mask, pos_embed) in enumerate(zip(srcs, masks, pos_embeds)):\n                # pos_embed: detr的位置编码 仅仅可以区分h,w的位置 因此对应不同的特征图有相同的h、w位置的话，是无法区分的\n                pos_embed = pos_embed.flatten(2).transpose(1, 2)  # [bs,c,h,w] -> [bs,hxw,c]\n                # scale-level position embedding  [bs,hxw,c] + [1,1,c] -> [bs,hxw,c]\n                # 每一层所有位置加上相同的level_embed 且 不同层的level_embed不同\n                # 所以这里pos_embed + level_embed，这样即使不同层特征有相同的w和h，那么也会产生不同的lvl_pos_embed  这样就可以区分了\n                lvl_pos_embed = pos_embed + self.level_embed[lvl].view(1, 1, -1)\n\n好了，到此为止backbone就介绍完了，产生了4个不同尺度的特征以及相应的多尺度位置编码，可以送入transformer的encoder中使用这些多尺度特征，后面再接着看Transformer模块。\n\n### 3.3 多尺度可变形注意力\n\n- **第一步 计算参考点**\n\none-stage的参考点是get_reference_points函数生成的，而two-stage参考点是通过gen_encoder_output_proposals函数生成的，后续two-stage再讲。\n\n在deformable_transformer.py中DeformableTransformerEncoder类的get_reference_points函数：\n\n    @staticmethod\n    def get_reference_points(spatial_shapes, valid_ratios, device):\n        \"\"\"\n        生成参考点   reference points  为什么参考点是中心点？  为什么要归一化？\n        spatial_shapes: 4个特征图的shape [4, 2]\n        valid_ratios: 4个特征图中非padding部分的边长占其边长的比例  [bs, 4, 2]  如全是1\n        device: cuda:0\n        \"\"\"\n        reference_points_list = []\n        # 遍历4个特征图的shape  比如 H_=100  W_=150\n        for lvl, (H_, W_) in enumerate(spatial_shapes):\n            # 0.5 -> 99.5 取100个点  0.5 1.5 2.5 ... 99.5\n            # 0.5 -> 149.5 取150个点 0.5 1.5 2.5 ... 149.5\n            # ref_y: [100, 150]  第一行：150个0.5  第二行：150个1.5 ... 第100行：150个99.5\n            # ref_x: [100, 150]  第一行：0.5 1.5...149.5   100行全部相同\n            ref_y, ref_x = torch.meshgrid(torch.linspace(0.5, H_ - 0.5, H_, dtype=torch.float32, device=device),\n                                          torch.linspace(0.5, W_ - 0.5, W_, dtype=torch.float32, device=device))\n            # [100, 150] -> [bs, 15000]  150个0.5 + 150个1.5 + ... + 150个99.5 -> 除以100 归一化\n            ref_y = ref_y.reshape(-1)[None] / (valid_ratios[:, None, lvl, 1] * H_)\n            # [100, 150] -> [bs, 15000]  100个: 0.5 1.5 ... 149.5  -> 除以150 归一化\n            ref_x = ref_x.reshape(-1)[None] / (valid_ratios[:, None, lvl, 0] * W_)\n            # [bs, 15000, 2] 每一项都是xy\n            ref = torch.stack((ref_x, ref_y), -1)\n            reference_points_list.append(ref)\n        # list4: [bs, H/8*W/8, 2] + [bs, H/16*W/16, 2] + [bs, H/32*W/32, 2] + [bs, H/64*W/64, 2] ->\n        # [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 2]\n        reference_points = torch.cat(reference_points_list, 1)\n        # reference_points: [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 2] -> [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 1, 2]\n        # valid_ratios: [1, 4, 2] -> [1, 1, 4, 2]\n        # 复制4份 每个特征点都有4个归一化参考点 -> [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 4, 2]\n        reference_points = reference_points[:, :, None] * valid_ratios[:, None]\n        # 4个flatten后特征图的归一化参考点坐标\n        return reference_points\n\n- **第二步 带入公式计算MSDeformAttn**\n\n\n    class MSDeformAttn(nn.Module):\n        def __init__(self, d_model=256, n_levels=4, n_heads=8, n_points=4):\n            \"\"\"\n            Multi-Scale Deformable Attention Module\n            :param d_model      hidden dimension\n            :param n_levels     number of feature levels\n            :param n_heads      number of attention heads\n            :param n_points     number of sampling points per attention head per feature level\n            \"\"\"\n            super().__init__()\n            if d_model % n_heads != 0:\n                raise ValueError('d_model must be divisible by n_heads, but got {} and {}'.format(d_model, n_heads))\n            _d_per_head = d_model // n_heads\n            # you'd better set _d_per_head to a power of 2 which is more efficient in our CUDA implementation\n            if not _is_power_of_2(_d_per_head):\n                warnings.warn(\"You'd better set d_model in MSDeformAttn to make the dimension of each attention head a power of 2 \"\n                              \"which is more efficient in our CUDA implementation.\")\n\n            self.im2col_step = 64        # 用于cuda算子\n\n            self.d_model = d_model       # 特征层channel = 256\n            self.n_levels = n_levels     # 多尺度特征 特征个数 = 4\n            self.n_heads = n_heads       # 多头 = 8\n            self.n_points = n_points     # 采样点个数 = 4\n\n            # 采样点的坐标偏移offset\n            # 每个query在每个注意力头和每个特征层都需要采样n_points=4个采样点 每个采样点2D坐标 xy = 2  ->  n_heads * n_levels * n_points * 2 = 256\n            self.sampling_offsets = nn.Linear(d_model, n_heads * n_levels * n_points * 2)\n            # 每个query对应的所有采样点的注意力权重  n_heads * n_levels * n_points = 8x8x4=128\n            self.attention_weights = nn.Linear(d_model, n_heads * n_levels * n_points)\n            # 线性变换得到value\n            self.value_proj = nn.Linear(d_model, d_model)\n            # 最后的线性变换得到输出结果\n            self.output_proj = nn.Linear(d_model, d_model)\n\n            self._reset_parameters()   # 生成初始化的偏置位置 + 注意力权重初始化\n\n        def _reset_parameters(self):\n            # 生成初始化的偏置位置 + 注意力权重初始化\n            constant_(self.sampling_offsets.weight.data, 0.)\n            # [8, ]  0, pi/4, pi/2, 3pi/4, pi, 5pi/4, 3pi/2, 7pi/4\n            thetas = torch.arange(self.n_heads, dtype=torch.float32) * (2.0 * math.pi / self.n_heads)\n            # [8, 2]\n            grid_init = torch.stack([thetas.cos(), thetas.sin()], -1)\n            # [n_heads, n_levels, n_points, xy] = [8, 4, 4, 2]\n            grid_init = (grid_init / grid_init.abs().max(-1, keepdim=True)[0]).view(self.n_heads, 1, 1, 2).repeat(1, self.n_levels, self.n_points, 1)\n            # 同一特征层中不同采样点的坐标偏移肯定不能够一样  因此这里需要处理\n            # 对于第i个采样点，在8个头部和所有特征层中，其坐标偏移为：\n            # (i,0) (i,i) (0,i) (-i,i) (-i,0) (-i,-i) (0,-i) (i,-i)   1<= i <= n_points\n            # 从图形上看，形成的偏移位置相当于3x3正方形卷积核 去除中心 中心是参考点\n            for i in range(self.n_points):\n                grid_init[:, :, i, :] *= i + 1\n            with torch.no_grad():\n                # 把初始化的偏移量的偏置bias设置进去  不计算梯度\n                self.sampling_offsets.bias = nn.Parameter(grid_init.view(-1))\n            constant_(self.attention_weights.weight.data, 0.)\n            constant_(self.attention_weights.bias.data, 0.)\n            xavier_uniform_(self.value_proj.weight.data)\n            constant_(self.value_proj.bias.data, 0.)\n            xavier_uniform_(self.output_proj.weight.data)\n            constant_(self.output_proj.bias.data, 0.)\n\n        def forward(self, query, reference_points, input_flatten, input_spatial_shapes, input_level_start_index, input_padding_mask=None):\n            \"\"\"\n            【encoder】\n            query: 4个flatten后的特征图+4个flatten后特征图对应的位置编码 = src_flatten + lvl_pos_embed_flatten\n                   [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            reference_points: 4个flatten后特征图对应的归一化参考点坐标 每个特征点有4个参考点 xy坐标\n                              [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 4, 2]\n            input_flatten: 4个flatten后的特征图=src_flatten  [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            input_spatial_shapes: 4个flatten后特征图的shape [4, 2]\n            input_level_start_index: 4个flatten后特征图对应被flatten后的起始索引 [4]  如[0,15100,18900,19850]\n            input_padding_mask: 4个flatten后特征图的mask [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64]\n            \"\"\"\n            N, Len_q, _ = query.shape  # bs   query length(每张图片所有特征点的数量)\n            N, Len_in, _ = input_flatten.shape   # bs   query length(每张图片所有特征点的数量)\n            assert (input_spatial_shapes[:, 0] * input_spatial_shapes[:, 1]).sum() == Len_in\n\n            # value = w_v * x  通过线性变换将输入的特征图变换成value  [bs, Len_q, 256] -> [bs, Len_q, 256]\n            value = self.value_proj(input_flatten)\n            # 将特征图mask过的地方（无效地方）的value用0填充\n            if input_padding_mask is not None:\n                value = value.masked_fill(input_padding_mask[..., None], float(0))\n            # 把value拆分成8个head      [bs, Len_q, 256] -> [bs, Len_q, 8, 32]\n            value = value.view(N, Len_in, self.n_heads, self.d_model // self.n_heads)\n\n            # 预测采样点的坐标偏移  [bs,Len_q,256] -> [bs,Len_q,256] -> [bs, Len_q, n_head, n_level, n_point, 2] = [bs, Len_q, 8, 4, 4, 2]\n            sampling_offsets = self.sampling_offsets(query).view(N, Len_q, self.n_heads, self.n_levels, self.n_points, 2)\n            # 预测采样点的注意力权重  [bs,Len_q,256] -> [bs,Len_q, 128] -> [bs, Len_q, 8, 4*4]\n            attention_weights = self.attention_weights(query).view(N, Len_q, self.n_heads, self.n_levels * self.n_points)\n            # 每个query在每个注意力头部内，每个特征层都采样4个特征点，即16个采样点(4x4),再对这16个采样点的注意力权重进行初始化\n            # [bs, Len_q, 8, 16] -> [bs, Len_q, 8, 16] -> [bs, Len_q, 8, 4, 4]\n            attention_weights = F.softmax(attention_weights, -1).view(N, Len_q, self.n_heads, self.n_levels, self.n_points)\n\n            # N, Len_q, n_heads, n_levels, n_points, 2\n            if reference_points.shape[-1] == 2:    # one stage\n                # [4, 2]  每个(h, w) -> (w, h)\n                offset_normalizer = torch.stack([input_spatial_shapes[..., 1], input_spatial_shapes[..., 0]], -1)\n                # [bs, Len_q, 1, n_point, 1, 2] + [bs, Len_q, n_head, n_level, n_point, 2] / [1, 1, 1, n_point, 1, 2]\n                # -> [bs, Len_q, 1, n_levels, n_points, 2]\n                # 参考点 + 偏移量/特征层宽高 = 采样点\n                sampling_locations = reference_points[:, :, None, :, None, :] \\\n                                     + sampling_offsets / offset_normalizer[None, None, None, :, None, :]\n            elif reference_points.shape[-1] == 4:  # two stage  +  iterative bounding box refinement\n                # 前两个是xy 后两个是wh\n                # 初始化时offset是在 -n_points ~ n_points 范围之间 这里除以self.n_points是相当于把offset归一化到 0~1\n                # 然后再乘以宽高的一半 再加上参考点的中心坐标 这就相当于使得最后的采样点坐标总是位于proposal box内\n                # 相当于对采样范围进行了约束 减少了搜索空间\n                sampling_locations = reference_points[:, :, None, :, None, :2] \\\n                                     + sampling_offsets / self.n_points * reference_points[:, :, None, :, None, 2:] * 0.5\n            else:\n                raise ValueError(\n                    'Last dim of reference_points must be 2 or 4, but get {} instead.'.format(reference_points.shape[-1]))\n            # 输入：采样点位置、注意力权重、所有点的value\n            # 具体过程：根据采样点位置从所有点的value中拿出对应的value，并且和对应的注意力权重进行weighted sum\n            # 调用CUDA实现的MSDeformAttnFunction函数  需要编译\n            # [bs, Len_q, 256]\n            output = MSDeformAttnFunction.apply(\n                value, input_spatial_shapes, input_level_start_index, sampling_locations, attention_weights, self.im2col_step)\n            # 最后进行公式中的线性运算\n            # [bs, Len_q, 256]\n            output = self.output_proj(output)\n            return output\n\n这里的MSDeformAttn是调用的CUDA实现的，具体过程是：根据采样点位置从所有点的value中拿出对应的value，并且和对应的注意力权重进行weighted sum，可以看看models/ops/functions/ms_deform_attn_func.py的ms_deform_attn_core_pytorch函数看看pytorch实现版本，看看核心思想：\n\n    def ms_deform_attn_core_pytorch(value, value_spatial_shapes, sampling_locations, attention_weights):\n    # for debug and test only,\n    # need to use cuda version instead\n    N_, S_, M_, D_ = value.shape\n    _, Lq_, M_, L_, P_, _ = sampling_locations.shape\n    # 把value分割到各个特征层上得到对应的 list value\n    value_list = value.split([H_ * W_ for H_, W_ in value_spatial_shapes], dim=1)\n    # 采样点坐标从[0,1] -> [-1, 1]  F.grid_sample要求采样坐标归一化到[-1, 1]\n    sampling_grids = 2 * sampling_locations - 1\n    sampling_value_list = []\n    for lid_, (H_, W_) in enumerate(value_spatial_shapes):\n        # N_, H_*W_, M_, D_ -> N_, H_*W_, M_*D_ -> N_, M_*D_, H_*W_ -> N_*M_, D_, H_, W_\n        value_l_ = value_list[lid_].flatten(2).transpose(1, 2).reshape(N_*M_, D_, H_, W_)  # 得到每个特征层的value list\n        # N_, Lq_, M_, P_, 2 -> N_, M_, Lq_, P_, 2 -> N_*M_, Lq_, P_, 2\n        sampling_grid_l_ = sampling_grids[:, :, :, lid_].transpose(1, 2).flatten(0, 1)  # 得到每个特征层的采样点 list\n        # N_*M_, D_, Lq_, P_  采样算法  根据每个特征层采样点到每个特征层的value进行采样  非采样点用0填充\n        sampling_value_l_ = F.grid_sample(value_l_, sampling_grid_l_,\n                                          mode='bilinear', padding_mode='zeros', align_corners=False)\n        sampling_value_list.append(sampling_value_l_)\n    # (N_, Lq_, M_, L_, P_) -> (N_, M_, Lq_, L_, P_) -> (N_, M_, 1, Lq_, L_*P_)\n    attention_weights = attention_weights.transpose(1, 2).reshape(N_*M_, 1, Lq_, L_*P_)\n    # 注意力权重 和 采样后的value 进行 weighted sum\n    output = (torch.stack(sampling_value_list, dim=-2).flatten(-2) * attention_weights).sum(-1).view(N_, M_*D_, Lq_)\n    return output.transpose(1, 2).contiguous()\n\n### 3.4 DETR简单版\n\n第一步，为Encoder的输入做准备，将多尺度特征图、各特征图对应的mask、各特征图对应的位置编码、各特征图的宽高、各特征图flatten后的起始索引等信息展品。\n\n    class DeformableTransformer(nn.Module):\n        def __init__(self, d_model=256, nhead=8,\n                     num_encoder_layers=6, num_decoder_layers=6, dim_feedforward=1024, dropout=0.1,\n                     activation=\"relu\", return_intermediate_dec=False,\n                     num_feature_levels=4, dec_n_points=4,  enc_n_points=4,\n                     two_stage=False, two_stage_num_proposals=300):\n            super().__init__()\n\n            self.d_model = d_model    # 256\n            self.nhead = nhead        # 8头注意力\n            self.two_stage = two_stage   # False\n            self.two_stage_num_proposals = two_stage_num_proposals   # 300\n\n            encoder_layer = DeformableTransformerEncoderLayer(d_model, dim_feedforward,\n                                                              dropout, activation,\n                                                              num_feature_levels, nhead, enc_n_points)\n            self.encoder = DeformableTransformerEncoder(encoder_layer, num_encoder_layers)\n\n            decoder_layer = DeformableTransformerDecoderLayer(d_model, dim_feedforward,\n                                                              dropout, activation,\n                                                              num_feature_levels, nhead, dec_n_points)\n            self.decoder = DeformableTransformerDecoder(decoder_layer, num_decoder_layers, return_intermediate_dec)\n\n            # scale-level position embedding  [4, 256]\n            # 因为deformable detr用到了多尺度特征  经过backbone会生成4个不同尺度的特征图  但是如果还是使用原先的sine position embedding\n            # detr是针对h和w进行编码的 不同位置的特征点会对应不同的编码值 但是deformable detr不同的特征图的不同位置就有可能会产生相同的位置编码，就无法区分了\n            # 为了解决这个问题，这里引入level_embed这个遍历  不同层的特征图会有不同的level_embed 再让原先的每层位置编码+每层的level_embed\n            # 这样就很好的区分不同层的位置编码了  而且这个level_embed是可学习的\n            self.level_embed = nn.Parameter(torch.Tensor(num_feature_levels, d_model))\n\n            if two_stage:\n                self.enc_output = nn.Linear(d_model, d_model)\n                self.enc_output_norm = nn.LayerNorm(d_model)\n                self.pos_trans = nn.Linear(d_model * 2, d_model * 2)\n                self.pos_trans_norm = nn.LayerNorm(d_model * 2)\n            else:\n                self.reference_points = nn.Linear(d_model, 2)\n\n            self._reset_parameters()\n\n        def forward(self, srcs, masks, pos_embeds, query_embed=None):\n            \"\"\"\n            经过backbone输出4个不同尺度的特征图srcs，以及这4个特征图对应的masks和位置编码\n            srcs: list4  0=[bs,256,H/8,W/8] 1=[bs,256,H/16,W/16] 2=[bs,256,H/32,W/32] 3=[bs,256,H/64,W/64]\n            masks: list4  0=[bs,H/8,W/8] 1=[bs,H/16,W/16] 2=[bs,H/32,W/32] 3=[bs,H/64,W/64]\n            pos_embeds: list4  0=[bs,256,H/8,W/8] 1=[bs,256,H/16,W/16] 2=[bs,256,H/32,W/32] 3=[bs,256,H/64,W/64]\n            query_embed: query embedding 参数 [300, 512]\n            \"\"\"\n            assert self.two_stage or query_embed is not None\n\n            # 为encoder的输入作准备：将多尺度特征图、各特征图对应的mask、位置编码、各特征图的高宽、各特征图flatten后的起始索引等展平\n            src_flatten = []\n            mask_flatten = []\n            lvl_pos_embed_flatten = []\n            spatial_shapes = []\n            for lvl, (src, mask, pos_embed) in enumerate(zip(srcs, masks, pos_embeds)):\n                bs, c, h, w = src.shape  # bs  channel  h   w\n                spatial_shape = (h, w)   # 特征图shape\n                spatial_shapes.append(spatial_shape)\n                src = src.flatten(2).transpose(1, 2)  # [bs,c,h,w] -> [bs,hxw,c]\n                mask = mask.flatten(1)                # [bs,h,w] -> [bs, hxw]\n                # pos_embed: detr的位置编码 仅仅可以区分h,w的位置 因此对应不同的特征图有相同的h、w位置的话，是无法区分的\n                pos_embed = pos_embed.flatten(2).transpose(1, 2)  # [bs,c,h,w] -> [bs,hxw,c]\n                # scale-level position embedding  [bs,hxw,c] + [1,1,c] -> [bs,hxw,c]\n                # 每一层所有位置加上相同的level_embed 且 不同层的level_embed不同\n                # 所以这里pos_embed + level_embed，这样即使不同层特征有相同的w和h，那么也会产生不同的lvl_pos_embed  这样就可以区分了\n                lvl_pos_embed = pos_embed + self.level_embed[lvl].view(1, 1, -1)\n                lvl_pos_embed_flatten.append(lvl_pos_embed)\n                src_flatten.append(src)\n                mask_flatten.append(mask)\n            # list4[bs, H/8 * W/8, 256] [bs, H/16 * W/16, 256] [bs, H/32 * W/32, 256] [bs, H/64 * W/64, 256] -> [bs, K, 256]\n            # K =  H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64\n            src_flatten = torch.cat(src_flatten, 1)\n            # list4[bs, H/8 * W/8] [bs, H/16 * W/16] [bs, H/32 * W/32] [bs, H/64 * W/64] -> [bs, K]\n            mask_flatten = torch.cat(mask_flatten, 1)\n            # list4[bs, H/8 * W/8, 256] [bs, H/16 * W/16, 256] [bs, H/32 * W/32, 256] [bs, H/64 * W/64, 256] -> [bs, K, 256]\n            lvl_pos_embed_flatten = torch.cat(lvl_pos_embed_flatten, 1)\n            # [4, h+w]  4个特征图的高和宽\n            spatial_shapes = torch.as_tensor(spatial_shapes, dtype=torch.long, device=src_flatten.device)\n            # 不同尺度特征图对应被flatten的那个维度的起始索引  Tensor[4]  如[0,15100,18900,19850]\n            level_start_index = torch.cat((spatial_shapes.new_zeros((1, )), spatial_shapes.prod(1).cumsum(0)[:-1]))\n            # 各尺度特征图中非padding部分的边长占其边长的比例  [bs, 4, 2]  如全是1\n            valid_ratios = torch.stack([self.get_valid_ratio(m) for m in masks], 1)\n\n第二步，Encoder：输入上述所有展平数据，输入Encoder中学习各个位置的相似度，增强输入的特征。输出memory（编码后的特征），shape = [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]，第二个维度是所有的特征点数量\n\n    # [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n    memory = self.encoder(src_flatten, spatial_shapes, level_start_index, valid_ratios, lvl_pos_embed_flatten, mask_flatten)\n\n第三步，为decoder的输入作准备：得到参考点\n这里暂时聊聊one-stage的情况，直接随机初始化 2D 参考点。\n\n        bs, _, c = memory.shape\n        if self.two_stage:\n            output_memory, output_proposals = self.gen_encoder_output_proposals(memory, mask_flatten, spatial_shapes)\n\n            # hack implementation for two-stage Deformable DETR\n            enc_outputs_class = self.decoder.class_embed[self.decoder.num_layers](output_memory)\n            enc_outputs_coord_unact = self.decoder.bbox_embed[self.decoder.num_layers](output_memory) + output_proposals\n\n            topk = self.two_stage_num_proposals\n            topk_proposals = torch.topk(enc_outputs_class[..., 0], topk, dim=1)[1]\n            topk_coords_unact = torch.gather(enc_outputs_coord_unact, 1, topk_proposals.unsqueeze(-1).repeat(1, 1, 4))\n            topk_coords_unact = topk_coords_unact.detach()\n            reference_points = topk_coords_unact.sigmoid()\n            init_reference_out = reference_points\n            pos_trans_out = self.pos_trans_norm(self.pos_trans(self.get_proposal_pos_embed(topk_coords_unact)))\n            query_embed, tgt = torch.split(pos_trans_out, c, dim=2)\n\t\telse:   # 默认执行\n            # 随机初始化 query_embed = nn.Embedding(num_queries, hidden_dim*2)\n            # [300, 512] -> [300, 256] + [300, 256]\n            query_embed, tgt = torch.split(query_embed, c, dim=1)\n            # 初始化query pos [300, 256] -> [bs, 300, 256]\n            query_embed = query_embed.unsqueeze(0).expand(bs, -1, -1)\n            # 初始化query embedding [300, 256] -> [bs, 300, 256]\n            tgt = tgt.unsqueeze(0).expand(bs, -1, -1)\n            # 由query pos接一个全连接层 再归一化后的参考点中心坐标 [bs, 300, 256] -> [bs, 300, 2]\n            reference_points = self.reference_points(query_embed).sigmoid()\n            init_reference_out = reference_points  # 初始化的归一化参考点坐标 [bs, 300, 2]\n\n第四步：Decoder解码特征并输出参考点\n\n    # decoder\n    # tgt: 初始化query embedding [bs, 300, 256]\n    # reference_points: 由query pos接一个全连接层 再归一化后的参考点中心坐标 [bs, 300, 2]\n    # query_embed: query pos[bs, 300, 256]\n    # memory: Encoder输出结果 [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n    # spatial_shapes: [4, 2] 4个特征层的shape\n    # level_start_index: [4, ] 4个特征层flatten后的开始index\n    # valid_ratios: [bs, 4, 2]\n    # mask_flatten: 4个特征层flatten后的mask [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64]\n    # hs: 6层decoder输出 [n_decoder, bs, num_query, d_model] = [6, bs, 300, 256]\n    # inter_references: 6层decoder学习到的参考点归一化中心坐标  [6, bs, 300, 2]\n    #                   one-stage=[n_decoder, bs, num_query, 2]  two-stage=[n_decoder, bs, num_query, 4]\n    hs, inter_references = self.decoder(tgt, reference_points, memory,\n                                        spatial_shapes, level_start_index, valid_ratios, query_embed, mask_flatten)\n\n    inter_references_out = inter_references\n    if self.two_stage:\n        return hs, init_reference_out, inter_references_out, enc_outputs_class, enc_outputs_coord_unact\n\n    # hs: 6层decoder输出 [n_decoder, bs, num_query, d_model] = [6, bs, 300, 256]\n    # init_reference_out: 初始化的参考点归一化中心坐标 [bs, 300, 2]\n    # inter_references: 6层decoder学习到的参考点归一化中心坐标  [6, bs, 300, 2]\n    #                   one-stage=[n_decoder, bs, num_query, 2]  two-stage=[n_decoder, bs, num_query, 4]\n    return hs, init_reference_out, inter_references_out, None, None\n\n这里的Encoder和transformer最主要的区别是使用了可变形注意力代替了原生的自注意力，而且还引入了参考点这个概念。主要过程就是：生成参考点（固定值 不可学习）、调用6个encoder layer。\n\n输入多尺度特征层：[bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]；\n\n每个encoder layer都会不断学习特征层中每个位置和4个采样点的相关性，最终输出的特征是增强后的特征图：[bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]；\n\n每个可变形注意力的query和value均来自flatten后的4个特征图，query = flatten后的4个特征图 + scale-level pos embedding，value = flatten后的4个特征图（后面会根据参考点再进行稀疏采样），key = 4个可学习的参考点。\n\n    class DeformableTransformerEncoder(nn.Module):\n        def __init__(self, encoder_layer, num_layers):\n            super().__init__()\n            self.layers = _get_clones(encoder_layer, num_layers)  # 6层DeformableTransformerEncoderLayer\n            self.num_layers = num_layers                          # 6\n\n        @staticmethod\n        def get_reference_points(spatial_shapes, valid_ratios, device):\n            \"\"\"\n            生成参考点   reference points  为什么参考点是中心点？  为什么要归一化？\n            spatial_shapes: 4个特征图的shape [4, 2]\n            valid_ratios: 4个特征图中非padding部分的边长占其边长的比例  [bs, 4, 2]  如全是1\n            device: cuda:0\n            \"\"\"\n            reference_points_list = []\n            # 遍历4个特征图的shape  比如 H_=100  W_=150\n            for lvl, (H_, W_) in enumerate(spatial_shapes):\n                # 0.5 -> 99.5 取100个点  0.5 1.5 2.5 ... 99.5\n                # 0.5 -> 149.5 取150个点 0.5 1.5 2.5 ... 149.5\n                # ref_y: [100, 150]  第一行：150个0.5  第二行：150个1.5 ... 第100行：150个99.5\n                # ref_x: [100, 150]  第一行：0.5 1.5...149.5   100行全部相同\n                ref_y, ref_x = torch.meshgrid(torch.linspace(0.5, H_ - 0.5, H_, dtype=torch.float32, device=device),\n                                              torch.linspace(0.5, W_ - 0.5, W_, dtype=torch.float32, device=device))\n                # [100, 150] -> [bs, 15000]  150个0.5 + 150个1.5 + ... + 150个99.5 -> 除以100 归一化\n                ref_y = ref_y.reshape(-1)[None] / (valid_ratios[:, None, lvl, 1] * H_)\n                # [100, 150] -> [bs, 15000]  100个: 0.5 1.5 ... 149.5  -> 除以150 归一化\n                ref_x = ref_x.reshape(-1)[None] / (valid_ratios[:, None, lvl, 0] * W_)\n                # [bs, 15000, 2] 每一项都是xy\n                ref = torch.stack((ref_x, ref_y), -1)\n                reference_points_list.append(ref)\n            # list4: [bs, H/8*W/8, 2] + [bs, H/16*W/16, 2] + [bs, H/32*W/32, 2] + [bs, H/64*W/64, 2] ->\n            # [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 2]\n            reference_points = torch.cat(reference_points_list, 1)\n            # reference_points: [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 2] -> [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 1, 2]\n            # valid_ratios: [1, 4, 2] -> [1, 1, 4, 2]\n            # 复制4份 每个特征点都有4个归一化参考点 -> [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 4, 2]\n            reference_points = reference_points[:, :, None] * valid_ratios[:, None]\n            # 4个flatten后特征图的归一化参考点坐标\n            return reference_points\n\n        def forward(self, src, spatial_shapes, level_start_index, valid_ratios, pos=None, padding_mask=None):\n            \"\"\"\n            src: 多尺度特征图(4个flatten后的特征图)  [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            spatial_shapes: 4个特征图的shape [4, 2]\n            level_start_index: [4] 4个flatten后特征图对应被flatten后的起始索引  如[0,15100,18900,19850]\n            valid_ratios: 4个特征图中非padding部分的边长占其边长的比例  [bs, 4, 2]  如全是1\n            pos: 4个flatten后特征图对应的位置编码（多尺度位置编码） [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            padding_mask: 4个flatten后特征图的mask [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64]\n            \"\"\"\n            output = src\n            # 4个flatten后特征图的归一化参考点坐标 每个特征点有4个参考点 xy坐标 [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 4, 2]\n            reference_points = self.get_reference_points(spatial_shapes, valid_ratios, device=src.device)\n            for _, layer in enumerate(self.layers):\n                output = layer(output, pos, reference_points, spatial_shapes, level_start_index, padding_mask)\n\n            # 经过6层encoder增强后的新特征  每一层不断学习特征层中每个位置和4个采样点的相关性，最终输出的特征是增强后的特征图\n            # [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            return output\n\n\n    class DeformableTransformerEncoderLayer(nn.Module):\n        def __init__(self,\n                     d_model=256, d_ffn=1024,\n                     dropout=0.1, activation=\"relu\",\n                     n_levels=4, n_heads=8, n_points=4):\n            super().__init__()\n\n            # self attention\n            self.self_attn = MSDeformAttn(d_model, n_levels, n_heads, n_points)\n            self.dropout1 = nn.Dropout(dropout)\n            self.norm1 = nn.LayerNorm(d_model)\n\n            # ffn\n            self.linear1 = nn.Linear(d_model, d_ffn)\n            self.activation = _get_activation_fn(activation)\n            self.dropout2 = nn.Dropout(dropout)\n            self.linear2 = nn.Linear(d_ffn, d_model)\n            self.dropout3 = nn.Dropout(dropout)\n            self.norm2 = nn.LayerNorm(d_model)\n\n        @staticmethod\n        def with_pos_embed(tensor, pos):\n            return tensor if pos is None else tensor + pos\n\n        def forward_ffn(self, src):\n            src2 = self.linear2(self.dropout2(self.activation(self.linear1(src))))\n            src = src + self.dropout3(src2)\n            src = self.norm2(src)\n            return src\n\n        def forward(self, src, pos, reference_points, spatial_shapes, level_start_index, padding_mask=None):\n            \"\"\"\n            src: 多尺度特征图(4个flatten后的特征图)  [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            reference_points: 4个flatten后特征图对应的归一化参考点坐标 [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 4, 2]\n            pos: 4个flatten后特征图对应的位置编码（多尺度位置编码） [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            spatial_shapes: 4个特征图的shape [4, 2]\n            level_start_index: [4] 4个flatten后特征图对应被flatten后的起始索引  如[0,15100,18900,19850]\n            padding_mask: 4个flatten后特征图的mask [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64]\n            \"\"\"\n            # self attention + add + norm\n            # query = flatten后的多尺度特征图 + scale-level pos\n            # key = 采样点  每个特征点对应周围的4个可学习的采样点\n            # value = flatten后的多尺度特征图\n            src2 = self.self_attn(self.with_pos_embed(src, pos), reference_points, src, spatial_shapes, level_start_index, padding_mask)\n            src = src + self.dropout1(src2)\n            src = self.norm1(src)\n\n            # ffn   feed forward + add + norm\n            src = self.forward_ffn(src)\n\n            # [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            return src\n### Encoder\n\n这里的Encoder和transformer最主要的区别是使用了可变形注意力代替了原生的自注意力，而且还引入了参考点这个概念。主要过程就是：生成参考点（固定值 不可学习）、调用6个encoder layer。\n\n输入多尺度特征层：[bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]；\n\n每个encoder layer都会不断学习特征层中每个位置和4个采样点的相关性，最终输出的特征是增强后的特征图：[bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]；\n\n每个可变形注意力的query和value均来自flatten后的4个特征图，query = flatten后的4个特征图 + scale-level pos embedding，value = flatten后的4个特征图（后面会根据参考点再进行稀疏采样），key = 4个可学习的参考点。\n\n    class DeformableTransformerEncoder(nn.Module):\n        def __init__(self, encoder_layer, num_layers):\n            super().__init__()\n            self.layers = _get_clones(encoder_layer, num_layers)  # 6层DeformableTransformerEncoderLayer\n            self.num_layers = num_layers                          # 6\n\n        @staticmethod\n        def get_reference_points(spatial_shapes, valid_ratios, device):\n            \"\"\"\n            生成参考点   reference points  为什么参考点是中心点？  为什么要归一化？\n            spatial_shapes: 4个特征图的shape [4, 2]\n            valid_ratios: 4个特征图中非padding部分的边长占其边长的比例  [bs, 4, 2]  如全是1\n            device: cuda:0\n            \"\"\"\n            reference_points_list = []\n            # 遍历4个特征图的shape  比如 H_=100  W_=150\n            for lvl, (H_, W_) in enumerate(spatial_shapes):\n                # 0.5 -> 99.5 取100个点  0.5 1.5 2.5 ... 99.5\n                # 0.5 -> 149.5 取150个点 0.5 1.5 2.5 ... 149.5\n                # ref_y: [100, 150]  第一行：150个0.5  第二行：150个1.5 ... 第100行：150个99.5\n                # ref_x: [100, 150]  第一行：0.5 1.5...149.5   100行全部相同\n                ref_y, ref_x = torch.meshgrid(torch.linspace(0.5, H_ - 0.5, H_, dtype=torch.float32, device=device),\n                                              torch.linspace(0.5, W_ - 0.5, W_, dtype=torch.float32, device=device))\n                # [100, 150] -> [bs, 15000]  150个0.5 + 150个1.5 + ... + 150个99.5 -> 除以100 归一化\n                ref_y = ref_y.reshape(-1)[None] / (valid_ratios[:, None, lvl, 1] * H_)\n                # [100, 150] -> [bs, 15000]  100个: 0.5 1.5 ... 149.5  -> 除以150 归一化\n                ref_x = ref_x.reshape(-1)[None] / (valid_ratios[:, None, lvl, 0] * W_)\n                # [bs, 15000, 2] 每一项都是xy\n                ref = torch.stack((ref_x, ref_y), -1)\n                reference_points_list.append(ref)\n            # list4: [bs, H/8*W/8, 2] + [bs, H/16*W/16, 2] + [bs, H/32*W/32, 2] + [bs, H/64*W/64, 2] ->\n            # [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 2]\n            reference_points = torch.cat(reference_points_list, 1)\n            # reference_points: [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 2] -> [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 1, 2]\n            # valid_ratios: [1, 4, 2] -> [1, 1, 4, 2]\n            # 复制4份 每个特征点都有4个归一化参考点 -> [bs, H/8*W/8+H/16*W/16+H/32*W/32+H/64*W/64, 4, 2]\n            reference_points = reference_points[:, :, None] * valid_ratios[:, None]\n            # 4个flatten后特征图的归一化参考点坐标\n            return reference_points\n\n        def forward(self, src, spatial_shapes, level_start_index, valid_ratios, pos=None, padding_mask=None):\n            \"\"\"\n            src: 多尺度特征图(4个flatten后的特征图)  [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            spatial_shapes: 4个特征图的shape [4, 2]\n            level_start_index: [4] 4个flatten后特征图对应被flatten后的起始索引  如[0,15100,18900,19850]\n            valid_ratios: 4个特征图中非padding部分的边长占其边长的比例  [bs, 4, 2]  如全是1\n            pos: 4个flatten后特征图对应的位置编码（多尺度位置编码） [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            padding_mask: 4个flatten后特征图的mask [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64]\n            \"\"\"\n            output = src\n            # 4个flatten后特征图的归一化参考点坐标 每个特征点有4个参考点 xy坐标 [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 4, 2]\n            reference_points = self.get_reference_points(spatial_shapes, valid_ratios, device=src.device)\n            for _, layer in enumerate(self.layers):\n                output = layer(output, pos, reference_points, spatial_shapes, level_start_index, padding_mask)\n\n            # 经过6层encoder增强后的新特征  每一层不断学习特征层中每个位置和4个采样点的相关性，最终输出的特征是增强后的特征图\n            # [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            return output\n\n\n    class DeformableTransformerEncoderLayer(nn.Module):\n        def __init__(self,\n                     d_model=256, d_ffn=1024,\n                     dropout=0.1, activation=\"relu\",\n                     n_levels=4, n_heads=8, n_points=4):\n            super().__init__()\n\n            # self attention\n            self.self_attn = MSDeformAttn(d_model, n_levels, n_heads, n_points)\n            self.dropout1 = nn.Dropout(dropout)\n            self.norm1 = nn.LayerNorm(d_model)\n\n            # ffn\n            self.linear1 = nn.Linear(d_model, d_ffn)\n            self.activation = _get_activation_fn(activation)\n            self.dropout2 = nn.Dropout(dropout)\n            self.linear2 = nn.Linear(d_ffn, d_model)\n            self.dropout3 = nn.Dropout(dropout)\n            self.norm2 = nn.LayerNorm(d_model)\n\n        @staticmethod\n        def with_pos_embed(tensor, pos):\n            return tensor if pos is None else tensor + pos\n\n        def forward_ffn(self, src):\n            src2 = self.linear2(self.dropout2(self.activation(self.linear1(src))))\n            src = src + self.dropout3(src2)\n            src = self.norm2(src)\n            return src\n\n        def forward(self, src, pos, reference_points, spatial_shapes, level_start_index, padding_mask=None):\n            \"\"\"\n            src: 多尺度特征图(4个flatten后的特征图)  [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            reference_points: 4个flatten后特征图对应的归一化参考点坐标 [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 4, 2]\n            pos: 4个flatten后特征图对应的位置编码（多尺度位置编码） [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            spatial_shapes: 4个特征图的shape [4, 2]\n            level_start_index: [4] 4个flatten后特征图对应被flatten后的起始索引  如[0,15100,18900,19850]\n            padding_mask: 4个flatten后特征图的mask [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64]\n            \"\"\"\n            # self attention + add + norm\n            # query = flatten后的多尺度特征图 + scale-level pos\n            # key = 采样点  每个特征点对应周围的4个可学习的采样点\n            # value = flatten后的多尺度特征图\n            src2 = self.self_attn(self.with_pos_embed(src, pos), reference_points, src, spatial_shapes, level_start_index, padding_mask)\n            src = src + self.dropout1(src2)\n            src = self.norm1(src)\n\n            # ffn   feed forward + add + norm\n            src = self.forward_ffn(src)\n\n            # [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n            return src\n\n### 使用两个改进策略：iterative bounding box refinement & two-stage的DETR\n\n2.4.1、iterative bounding box refinement\n思想：翻译过来就是通过不断的迭代对bbox框进行校正，类似cascaded head那样，实际上也是coarse-to-fine不断矫正的一个过程。具体做法：每一层decoder运行之后，都会将这层decoder输出的output送入非共享的bbox head中，根据当前层预测得到的bbox xy坐标，对reference_points进行矫正，得到矫正后的reference_points，并以先验的reference_points送入下一层decoder，继续执行。所以和普通版不同的是，iterative bounding box refinement在每一次decoder中的reference_points都是不同的（简单版是相同的）。\n\n注意：1. 各层的检测头部是不共享参数的；2. 校正后的bbox梯度会被阻断（detach），不会跨层传播\n\n** 第一步、定义self.transformer.decoder.bbox_embed**\n\n    # iterative bounding box refinement\n    # 对decoder每层都有不同的分类头和回归头 这里使用_get_clones(deepcopy) 则不同分类头和回归头参数不共享\n    if with_box_refine:\n        # 如果是two stage 则num_pred=7 最后一层就是第一阶段中proposal的预测\n        self.class_embed = _get_clones(self.class_embed, num_pred)\n        self.bbox_embed = _get_clones(self.bbox_embed, num_pred)\n        nn.init.constant_(self.bbox_embed[0].layers[-1].bias.data[2:], -2.0)\n        # hack implementation for iterative bounding box refinement\n        # 不使用iterative bounding box refinement时self.transformer.decoder.bbox_embed=None\n        # 反之decoder每一层都会预测bbox偏移量 使用这一层bbox偏移量对上一层的预测输出进行矫正\n        self.transformer.decoder.bbox_embed = self.bbox_embed\n    else:\n        nn.init.constant_(self.bbox_embed.layers[-1].bias.data[2:], -2.0)\n        # 6层decoder共享同一个分类头/回归头  共享参数\n        self.class_embed = nn.ModuleList([self.class_embed for _ in range(num_pred)])  # 6层\n        self.bbox_embed = nn.ModuleList([self.bbox_embed for _ in range(num_pred)])   # 6层\n        self.transformer.decoder.bbox_embed = None\n\n** 第二步、矫正每层decoder的参考点 **\n\n    # hack implementation for iterative bounding box refinement\n    # 使用iterative bounding box refinement 这里的self.bbox_embed就不是None\n    # 如果没有iterative bounding box refinement那么reference_points是不变的\n    # 每层参考点都会根据上一层的输出结果进行矫正\n    if self.bbox_embed is not None:\n        tmp = self.bbox_embed[lid](output)  # [bs, 300, 256] -> [bs, 300, 4(xywh)]\n        if reference_points.shape[-1] == 4:  # two stage\n            new_reference_points = tmp + inverse_sigmoid(reference_points)\n            new_reference_points = new_reference_points.sigmoid()\n        else:  # one stage\n            assert reference_points.shape[-1] == 2\n            new_reference_points = tmp\n            # 根据decoder每层解码的特征图->回归头（不共享参数） 得到相对参考点的偏移量xy\n            # 然后再加上参考点坐标（反归一化），再进行sigmoid归一化 得到矫正的参考点\n            new_reference_points[..., :2] = tmp[..., :2] + inverse_sigmoid(reference_points)\n            new_reference_points = new_reference_points.sigmoid()\n        # reference_points: [bs, 300, 2] -> [bs, 300, 4]\n        # .detach() 取消了梯度  因为这个参考点在各层相当于作为先验的角色\n        reference_points = new_reference_points.detach()\n\n** 第三步、MSDeformAttn中获取采样点**\n\n    # N, Len_q, n_heads, n_levels, n_points, 2\n    if reference_points.shape[-1] == 2:    # one stage\n        # [4, 2]  每个(h, w) -> (w, h)\n        offset_normalizer = torch.stack([input_spatial_shapes[..., 1], input_spatial_shapes[..., 0]], -1)\n        # [bs, Len_q, 1, n_point, 1, 2] + [bs, Len_q, n_head, n_level, n_point, 2] / [1, 1, 1, n_point, 1, 2]\n        # -> [bs, Len_q, 1, n_levels, n_points, 2]\n        # 参考点 + 偏移量/特征层宽高 = 采样点\n        sampling_locations = reference_points[:, :, None, :, None, :] \\\n                             + sampling_offsets / offset_normalizer[None, None, None, :, None, :]\n    elif reference_points.shape[-1] == 4:  # two stage  iterative bounding box refinement\n        # 前两个是xy 后两个是wh\n        # 初始化时offset是在 -n_points ~ n_points 范围之间 这里除以self.n_points是相当于把offset归一化到 0~1\n        # 然后再乘以宽高的一半 再加上参考点的中心坐标 这就相当于使得最后的采样点坐标总是位于proposal box内\n        # 相当于对采样范围进行了约束 减少了搜索空间\n        sampling_locations = reference_points[:, :, None, :, None, :2] \\\n                             + sampling_offsets / self.n_points * reference_points[:, :, None, :, None, 2:] * 0.5\n\n### two stage\n\n    注意：two-stage策略必须和iterative bounding box refinement策略一起使用。\n\n    核心思想： Encoder会生成特征memory，再自己生成初步proposals（其实就是特征图上的点坐标 xywh）。然后分别使用非共享检测头的分类分支对memory进行分类预测，得到对每个类别的分类结果；再用回归分支进行回归预测，得到proposals的偏移量（xywh）。再用初步proposals + 偏移量 得到第一个阶段的预测proposals。然后选取top-k个分数最高的那批预测proposals作为Decoder的参考点。并且，Decoder的object query和 query pos都是由参考点通过位置嵌入（position embedding）再接上一个全连接层 + LN层处理生成的。\n\n** 第一步、定义self.transformer.decoder.class_embed和bbox_embed **\n\n        # if two-stage, the last class_embed and bbox_embed is for region proposal generation\n        # two stage：7个预测头   最后一个class_embed 和 bbox_embed 产生 region proposal\n        # one stage：6个预测头\n        num_pred = (transformer.decoder.num_layers + 1) if two_stage else transformer.decoder.num_layers \n\n        # iterative bounding box refinement\n        # 对decoder每层都有不同的分类头和回归头 这里使用_get_clones(deepcopy) 则不同分类头和回归头参数不共享\n        if with_box_refine:\n            self.class_embed = _get_clones(self.class_embed, num_pred)\n            self.bbox_embed = _get_clones(self.bbox_embed, num_pred)\n            nn.init.constant_(self.bbox_embed[0].layers[-1].bias.data[2:], -2.0)\n            # hack implementation for iterative bounding box refinement\n            # 不使用iterative bounding box refinement时self.transformer.decoder.bbox_embed=None\n            # 反之decoder每一层都会预测bbox偏移量 使用这一层bbox偏移量对上一层的预测输出进行矫正\n            self.transformer.decoder.bbox_embed = self.bbox_embed\n        else:  \n        \t...\n\n\t\tif two_stage:\n            # hack implementation for two-stage\n            self.transformer.decoder.class_embed = self.class_embed\n            for box_embed in self.bbox_embed:\n                nn.init.constant_(box_embed.layers[-1].bias.data[2:], 0.0)\n\n另外还要注意的是，如果是two stage，传入transformer中的query_embeds是为空的：\n\n** 第二步、为decoder的输入作准备，得到参考点/先验框reference_points 、query(tgt)和query pos(query_embed)**\n\n    if two_stage:\n        # 对Encoder输出memory进行处理：全连接层 + 层归一化\n        self.enc_output = nn.Linear(d_model, d_model)\n        self.enc_output_norm = nn.LayerNorm(d_model)\n        # 对top-k proposal box进行处理得到最终的query和query pos\n        self.pos_trans = nn.Linear(d_model * 2, d_model * 2)\n        self.pos_trans_norm = nn.LayerNorm(d_model * 2)\n    else:\n        self.reference_points = nn.Linear(d_model, 2)\n\n生成参考点/先验框reference_points xywh，xy还是和encoder一样的特征图坐标中心点，wh=0.05 * (2**i)，i是第几层特征层\n\n    def gen_encoder_output_proposals(self, memory, memory_padding_mask, spatial_shapes):\n        \"\"\"得到第一阶段预测的所有proposal box output_proposals和处理后的Encoder输出output_memory\n        memory: Encoder输出特征  [bs, H/8 * W/8 + ... + H/64 * W/64, 256]\n        memory_padding_mask: Encoder输出特征对应的mask [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64]\n        spatial_shapes: [4, 2] backbone输出的4个特征图的shape\n        \"\"\"\n        N_, S_, C_ = memory.shape  # bs  H/8 * W/8 + ... + H/64 * W/64  256\n        base_scale = 4.0\n        proposals = []\n        _cur = 0   # 帮助找到mask中每个特征图的初始index\n        for lvl, (H_, W_) in enumerate(spatial_shapes):  # 如H_=76  W_=112\n            # 1、生成所有proposal box的中心点坐标xy\n            # 展平后的mask [bs, 76, 112, 1]\n            mask_flatten_ = memory_padding_mask[:, _cur:(_cur + H_ * W_)].view(N_, H_, W_, 1)\n            valid_H = torch.sum(~mask_flatten_[:, :, 0, 0], 1)\n            valid_W = torch.sum(~mask_flatten_[:, 0, :, 0], 1)\n            # grid_y = [76, 112]   76行112列  第一行全是0  第二行全是1 ... 第76行全是75\n            # grid_x = [76, 112]   76行112列  76行全是 0 1 2 ... 111\n            grid_y, grid_x = torch.meshgrid(torch.linspace(0, H_ - 1, H_, dtype=torch.float32, device=memory.device),\n                                            torch.linspace(0, W_ - 1, W_, dtype=torch.float32, device=memory.device))\n            # grid = [76, 112, 2(xy)]   这个特征图上的所有坐标点x,y\n            grid = torch.cat([grid_x.unsqueeze(-1), grid_y.unsqueeze(-1)], -1)\n            scale = torch.cat([valid_W.unsqueeze(-1), valid_H.unsqueeze(-1)], 1).view(N_, 1, 1, 2)  # [bs, 1, 1, 2(xy)]\n            # [76, 112, 2(xy)] -> [1, 76, 112, 2] + 0.5 得到所有网格中心点坐标  这里和one-stage的get_reference_points函数原理是一样的\n            grid = (grid.unsqueeze(0).expand(N_, -1, -1, -1) + 0.5) / scale\n\n            # 2、生成所有proposal box的宽高wh  第i层特征默认wh = 0.05 * (2**i)\n            wh = torch.ones_like(grid) * 0.05 * (2.0 ** lvl)\n            # 3、concat xy+wh -> proposal xywh [bs, 76x112, 4(xywh)]\n            proposal = torch.cat((grid, wh), -1).view(N_, -1, 4)\n            proposals.append(proposal)\n            _cur += (H_ * W_)\n        # concat 4 feature map proposals [bs, H/8 x W/8 + ... + H/64 x W/64] = [bs, 11312, 4]\n        output_proposals = torch.cat(proposals, 1)\n        # 筛选一下 xywh 都要处于（0.01，0.99）之间\n        output_proposals_valid = ((output_proposals > 0.01) & (output_proposals < 0.99)).all(-1, keepdim=True)\n        # 这里为什么要用log(x/1-x)这个公式？？？\n        output_proposals = torch.log(output_proposals / (1 - output_proposals))\n        # mask的地方是无效的 直接用inf代替\n        output_proposals = output_proposals.masked_fill(memory_padding_mask.unsqueeze(-1), float('inf'))\n        # 再按条件筛选一下 不符合的用用inf代替\n        output_proposals = output_proposals.masked_fill(~output_proposals_valid, float('inf'))\n\n        output_memory = memory\n        output_memory = output_memory.masked_fill(memory_padding_mask.unsqueeze(-1), float(0))\n        output_memory = output_memory.masked_fill(~output_proposals_valid, float(0))\n        # 对encoder输出进行处理：全连接层 + LayerNorm\n        output_memory = self.enc_output_norm(self.enc_output(output_memory))\n        return output_memory, output_proposals\n\n再根据参考点/先验框reference_points xywh ，再利用非共享参数分类头和回归头的第7个head分别对处理过的Encoder的输出结果output_memory进行分类和回归。\n\n提取分类结果第1个类别（其实我觉得这样做不是很合理，直接二分类判断前景背景不是更好嘛？）前topk个初步参考点output_proposals 的回归头结果作为Encoder层中的最终参考点reference_points ，再用这些reference_points 生成Docder的query和query pos：\n\n\n    # [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n    memory = self.encoder(src_flatten, spatial_shapes, level_start_index, valid_ratios, lvl_pos_embed_flatten, mask_flatten)\n\n    # 为decoder的输入作准备：得到参考点、query embedding(tgt)和query pos(query_embed)\n    # one-stage和two-stage的生成方式不同\n    # two-stage: 参考点=Encoder预测的top-k（300个）得分最高的proposal boxes,然后对参考点进行位置嵌入生成query和query pos\n    # one-stage: query和query pos就是预设的query_embed,然后将query_embed经过全连接层输出2d参考点（归一化的中心坐标）\n    bs, _, c = memory.shape\n    if self.two_stage:\n        # 对memory进行处理得到output_memory: [bs, H/8 * W/8 + ... + H/64 * W/64, 256]\n        # 并生成初步output_proposals: [bs, H/8 * W/8 + ... + H/64 * W/64, 4]  其实就是特征图上的一个个的点坐标\n        output_memory, output_proposals = self.gen_encoder_output_proposals(memory, mask_flatten, spatial_shapes)\n\n        # hack implementation for two-stage Deformable DETR\n        # 多分类：[bs, H/8 * W/8 + ... + H/64 * W/64, 256] -> [bs, H/8 * W/8 + ... + H/64 * W/64, 91]\n        # 其实个人觉得这里直接进行一个二分类足够了\n        enc_outputs_class = self.decoder.class_embed[self.decoder.num_layers](output_memory)\n        # 回归：预测偏移量 + 参考点坐标   [bs, H/8 * W/8 + ... + H/64 * W/64, 4]\n        # two-stage 必须和 iterative bounding box refinement一起使用 不然bbox_embed=None 报错\n        enc_outputs_coord_unact = self.decoder.bbox_embed[self.decoder.num_layers](output_memory) + output_proposals\n\n        # 得到参考点reference_points/先验框\n        topk = self.two_stage_num_proposals  # 300\n        # 直接用第一个类别的预测结果来算top-k，代表二分类\n        # 如果不使用iterative bounding box refinement那么所有class_embed共享参数 导致第二阶段对解码输出进行分类时都会偏向于第一个类别\n        # topk_proposals: [bs, 300]  top300 index\n        topk_proposals = torch.topk(enc_outputs_class[..., 0], topk, dim=1)[1]\n        # topk_coords_unact: top300个分类得分最高的index对应的预测bbox [bs, 300, 4]\n        topk_coords_unact = torch.gather(enc_outputs_coord_unact, 1, topk_proposals.unsqueeze(-1).repeat(1, 1, 4))\n        topk_coords_unact = topk_coords_unact.detach()  # 以先验框的形式存在  取消梯度\n        reference_points = topk_coords_unact.sigmoid()  # 得到归一化参考点坐标  最终会送到decoder中作为初始的参考点\n        init_reference_out = reference_points\n\n        # 生成Docder的query和query pos\n        # 先对top-k proposal box进行位置编码，编码方式是给xywh每个都赋予128维 其中每个128维使用sine编码  最后用全连接层和LN处理\n        # 最终得到pos_trans_out: [bs, 300, 512] 前256为query pos(x、y信息)  后256为query(w、h信息)\n        pos_trans_out = self.pos_trans_norm(self.pos_trans(self.get_proposal_pos_embed(topk_coords_unact)))\n        query_embed, tgt = torch.split(pos_trans_out, c, dim=2)\n    else:   # 默认执行\n        # 随机初始化 query_embed = nn.Embedding(num_queries, hidden_dim*2)\n        # [300, 512] -> [300, 256] + [300, 256]\n        query_embed, tgt = torch.split(query_embed, c, dim=1)\n        # 初始化query pos [300, 256] -> [bs, 300, 256]\n        query_embed = query_embed.unsqueeze(0).expand(bs, -1, -1)\n        # 初始化query embedding [300, 256] -> [bs, 300, 256]\n        tgt = tgt.unsqueeze(0).expand(bs, -1, -1)\n        # 由query pos接一个全连接层 再归一化后的参考点中心坐标 [bs, 300, 256] -> [bs, 300, 2]\n        reference_points = self.reference_points(query_embed).sigmoid()\n        init_reference_out = reference_points  # 初始化的归一化参考点坐标 [bs, 300, 2]\n\n\n**第三步、输入decoder中**\n\n注意这里的参考点（相当于anchor）是4D的：\n\n    # decoder\n    # tgt: 初始化query embedding [bs, 300, 256]\n    # reference_points: 由query pos接一个全连接层 再归一化后的参考点中心坐标 [bs, 300, 2]  two-stage=[bs, 300, 4]\n    # query_embed: query pos[bs, 300, 256]\n    # memory: Encoder输出结果 [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64, 256]\n    # spatial_shapes: [4, 2] 4个特征层的shape\n    # level_start_index: [4, ] 4个特征层flatten后的开始index\n    # valid_ratios: [bs, 4, 2]\n    # mask_flatten: 4个特征层flatten后的mask [bs, H/8 * W/8 + H/16 * W/16 + H/32 * W/32 + H/64 * W/64]\n    # hs: 6层decoder输出 [n_decoder, bs, num_query, d_model] = [6, bs, 300, 256]\n    # inter_references: 6层decoder学习到的参考点归一化中心坐标  [6, bs, 300, 2]\n    #                   one-stage=[n_decoder, bs, num_query, 2]  two-stage=[n_decoder, bs, num_query, 4]\n    hs, inter_references = self.decoder(tgt, reference_points, memory,\n                                        spatial_shapes, level_start_index, valid_ratios, query_embed, mask_flatten)\n\n        # N, Len_q, n_heads, n_levels, n_points, 2\n        if reference_points.shape[-1] == 2:    # one stage\n            # [4, 2]  每个(h, w) -> (w, h)\n            offset_normalizer = torch.stack([input_spatial_shapes[..., 1], input_spatial_shapes[..., 0]], -1)\n            # [bs, Len_q, 1, n_point, 1, 2] + [bs, Len_q, n_head, n_level, n_point, 2] / [1, 1, 1, n_point, 1, 2]\n            # -> [bs, Len_q, 1, n_levels, n_points, 2]\n            # 参考点 + 偏移量/特征层宽高 = 采样点\n            sampling_locations = reference_points[:, :, None, :, None, :] \\\n                                 + sampling_offsets / offset_normalizer[None, None, None, :, None, :]\n        # two stage  +  iterative bounding box refinement\n        elif reference_points.shape[-1] == 4:\n            # 前两个是xy 后两个是wh\n            # 初始化时offset是在 -n_points ~ n_points 范围之间 这里除以self.n_points是相当于把offset归一化到 0~1\n            # 然后再乘以宽高的一半 再加上参考点的中心坐标 这就相当于使得最后的采样点坐标总是位于proposal box内\n            # 相当于对采样范围进行了约束 减少了搜索空间\n            sampling_locations = reference_points[:, :, None, :, None, :2] \\\n                                 + sampling_offsets / self.n_points * reference_points[:, :, None, :, None, 2:] * 0.5\n\n所以在MSDeformAttn计算采样点是不一样的：\n\n    # N, Len_q, n_heads, n_levels, n_points, 2\n    if reference_points.shape[-1] == 2:    # one stage\n        # [4, 2]  每个(h, w) -> (w, h)\n        offset_normalizer = torch.stack([input_spatial_shapes[..., 1], input_spatial_shapes[..., 0]], -1)\n        # [bs, Len_q, 1, n_point, 1, 2] + [bs, Len_q, n_head, n_level, n_point, 2] / [1, 1, 1, n_point, 1, 2]\n        # -> [bs, Len_q, 1, n_levels, n_points, 2]\n        # 参考点 + 偏移量/特征层宽高 = 采样点\n        sampling_locations = reference_points[:, :, None, :, None, :] \\\n                             + sampling_offsets / offset_normalizer[None, None, None, :, None, :]\n    # two stage  +  iterative bounding box refinement\n    elif reference_points.shape[-1] == 4:\n        # 前两个是xy 后两个是wh\n        # 初始化时offset是在 -n_points ~ n_points 范围之间 这里除以self.n_points是相当于把offset归一化到 0~1\n        # 然后再乘以宽高的一半 再加上参考点的中心坐标 这就相当于使得最后的采样点坐标总是位于proposal box内\n        # 相当于对采样范围进行了约束 减少了搜索空间\n        sampling_locations = reference_points[:, :, None, :, None, :2] \\\n                             + sampling_offsets / self.n_points * reference_points[:, :, None, :, None, 2:] * 0.5\n","tags":[],"folderPathname":"/Computer Vision/Detection","data":{},"createdAt":"2024-03-25T03:09:14.158Z","updatedAt":"2024-03-31T09:18:38.629Z","trashed":false,"_rev":"Ajhe_Difs"}