{"_id":"note:QaSuUmskWm","title":"OSTrack","content":"# OSTrack论文笔记\n\n## 1.OverView\n\n![model](https://github.com/1248818919/My_NOTE/blob/master/assets/Computer_Vision/Track/SingleView/OSTrack/model.jpg?raw=true)\n\n目前流行的双流两阶段跟踪框架分别提取模板和搜索区域的特征，然后进行关系建模，因此提取的特征缺乏对目标的感知，目标背景的可分辨性有限。为了解决上述问题，提出了一种新的单流跟踪（OSTrack）框架，该框架通过将模板搜索图像对与双向信息流桥接来统一特征学习和关系建模。通过这种方式，可以通过相互引导来动态地提取面向判别目标的特征。由于不需要额外的重型关系建模模块，并且实现高度并行化，因此所提出的跟踪器运行速度很快。为了进一步提高推理效率，基于在单流框架中计算出的强相似性先验，提出了一种网络内候选者早期消除模块。作为一个统一的框架，OSTrack在多个基准测试上实现了最先进的性能，特别是在单次跟踪基准GOT-10k上显示了令人印象深刻的结果，即实现了73.7%的AO，将现有的最佳结果（SwinTrack）提高了4.3%。此外，我们的方法保持了良好的性能-速度折衷，并显示出更快的收敛性。\n\n## 2.Related Work\n\n我觉得下面的图挺形象的，高度代表他们模型大小。\n\n![related_work](https://github.com/1248818919/My_NOTE/blob/master/assets/Computer_Vision/Track/SingleView/OSTrack/related_work.jpg?raw=true)\n\n## 3.Approach\n\n1.首先将图像展开成seq，$z_p \\in R^{N_z×(3*P^2)}$，$N_z=H_zW_z/P^2$,然后使用一个线性层将他们的维度变成D，在加上position embeddings。这里作者还进行了消融实验，查看到底是位置编码好还是添加身份信息编码好。\n\n2.将tokens送入到具有Early Elimination module的模块中。具体的，作者将每一层的encoder可视化后进行查看，发现重点已经突出了，所以对candidate进行了选择从而减轻计算量和避免背景影响。对于template来说，作者都是选用了template最中心的那块区域所产生的token来代表这个template，从而避免背景所产生的的干扰。对于search来说，作者根据score的得分进行选择，因为得分越小越代表背景（作者这么说的）然后，作者选择前K个token来作为search region的tokens，其中保留比例定义为$ρ = k/n$\n\n3.为了将token还原成2D图像，作者还添加了pad模块，就是在对应位置进行pad。然后还原得到的特征图送入到FCN(fully convolutional network)中，FCN中有很多头，产生score map（置信度图），位置偏移图，bounding box size图。\n\n## 4.实验\n\n![res1](https://github.com/1248818919/My_NOTE/blob/master/assets/Computer_Vision/Track/SingleView/OSTrack/res.jpg?raw=true)\n\n![res2](https://github.com/1248818919/My_NOTE/blob/master/assets/Computer_Vision/Track/SingleView/OSTrack/res2.jpg?raw=true)\n\n![res3](https://github.com/1248818919/My_NOTE/blob/master/assets/Computer_Vision/Track/SingleView/OSTrack/res3.jpg?raw=true)\n\n## 5.代码\n\n### 单GPU版本\n\n- **路径设置问题**\n\n本代码中的路径都是利用一个local.py进行设置，这个已经在很多地方看见了，具体的\n\n    def parse_args():\n        parser = argparse.ArgumentParser(description='Create default local file on ITP or PAI')\n        parser.add_argument(\"--workspace_dir\", type=str, required=True)  # workspace dir\n        parser.add_argument(\"--data_dir\", type=str, required=True)\n        parser.add_argument(\"--save_dir\", type=str, required=True)\n        args = parser.parse_args()\n        ...\n        return args\n\n\n    if __name__ == \"__main__\":\n        args = parse_args()\n        workspace_dir = os.path.realpath(args.workspace_dir)\n        data_dir = os.path.realpath(args.data_dir)\n        save_dir = os.path.realpath(args.save_dir)\n        create_default_local_file_ITP_train(workspace_dir, data_dir)\n        create_default_local_file_ITP_test(workspace_dir, data_dir, save_dir)\n\n其中，create_default_local_file_ITP_train是用来生成local.py文件，local.py文件中记录了本项目的项目路径。\n\n    def create_default_local_file_ITP_train(workspace_dir, data_dir):\n        path = os.path.join(os.path.dirname(__file__), 'local.py')\n\n        empty_str = '\\'\\''\n        default_settings = OrderedDict({\n            'workspace_dir': workspace_dir,\n            'tensorboard_dir': os.path.join(workspace_dir, 'tensorboard'),    # Directory for tensorboard files.\n            'pretrained_networks': os.path.join(workspace_dir, 'pretrained_networks'),\n            'lasot_dir': os.path.join(data_dir, 'lasot'),\n            'got10k_dir': os.path.join(data_dir, 'got10k/train'),\n            'got10k_val_dir': os.path.join(data_dir, 'got10k/val'),\n            'lasot_lmdb_dir': os.path.join(data_dir, 'lasot_lmdb'),\n            'got10k_lmdb_dir': os.path.join(data_dir, 'got10k_lmdb'),\n            'trackingnet_dir': os.path.join(data_dir, 'trackingnet'),\n            'trackingnet_lmdb_dir': os.path.join(data_dir, 'trackingnet_lmdb'),\n            'coco_dir': os.path.join(data_dir, 'coco'),\n            'coco_lmdb_dir': os.path.join(data_dir, 'coco_lmdb'),\n            'lvis_dir': empty_str,\n            'sbd_dir': empty_str,\n            'imagenet_dir': os.path.join(data_dir, 'vid'),\n            'imagenet_lmdb_dir': os.path.join(data_dir, 'vid_lmdb'),\n            'imagenetdet_dir': empty_str,\n            'ecssd_dir': empty_str,\n            'hkuis_dir': empty_str,\n            'msra10k_dir': empty_str,\n            'davis_dir': empty_str,\n            'youtubevos_dir': empty_str})\n\n        comment = {'workspace_dir': 'Base directory for saving network checkpoints.',\n                   'tensorboard_dir': 'Directory for tensorboard files.'}\n\n        with open(path, 'w') as f:\n            f.write('class EnvironmentSettings:\\n')\n            f.write('    def __init__(self):\\n')\n\n            for attr, attr_val in default_settings.items():\n                comment_str = None\n                if attr in comment:\n                    comment_str = comment[attr]\n                if comment_str is None:\n                    if attr_val == empty_str:\n                        f.write('        self.{} = {}\\n'.format(attr, attr_val))\n                    else:\n                        f.write('        self.{} = \\'{}\\'\\n'.format(attr, attr_val))\n                else:\n                    f.write('        self.{} = \\'{}\\'    # {}\\n'.format(attr, attr_val, comment_str))\n\n其中,local.py是长这样子的\n\n    class EnvironmentSettings:\n        def __init__(self):\n            self.workspace_dir = '/data/stu/yeziheng/OSTrack'    # Base directory for saving network checkpoints.\n            self.tensorboard_dir = '/data/stu/yeziheng/OSTrack/tensorboard'    # Directory for tensorboard files.\n            self.pretrained_networks = '/data/stu/yeziheng/OSTrack/pretrained_networks'\n            self.lasot_dir = '/data/stu/yeziheng/OSTrack/data/lasot'\n            self.got10k_dir = '/data/stu/yeziheng/OSTrack/data/got10k/train'\n            self.got10k_val_dir = '/data/stu/yeziheng/OSTrack/data/got10k/val'\n            self.lasot_lmdb_dir = '/data/stu/yeziheng/OSTrack/data/lasot_lmdb'\n            self.got10k_lmdb_dir = '/data/stu/yeziheng/OSTrack/data/got10k_lmdb'\n            self.trackingnet_dir = '/data/stu/yeziheng/OSTrack/data/trackingnet'\n            self.trackingnet_lmdb_dir = '/data/stu/yeziheng/OSTrack/data/trackingnet_lmdb'\n            self.coco_dir = '/data/stu/yeziheng/OSTrack/data/coco'\n            self.coco_lmdb_dir = '/data/stu/yeziheng/OSTrack/data/coco_lmdb'\n            self.lvis_dir = ''\n            self.sbd_dir = ''\n            self.imagenet_dir = '/data/stu/yeziheng/OSTrack/data/vid'\n            self.imagenet_lmdb_dir = '/data/stu/yeziheng/OSTrack/data/vid_lmdb'\n            self.imagenetdet_dir = ''\n            self.ecssd_dir = ''\n            self.hkuis_dir = ''\n            self.msra10k_dir = ''\n            self.davis_dir = ''\n            self.youtubevos_dir = ''\n\n如果要加载，就是用下面这一段函数\n\n    settings = ws_settings.Settings() # Training settings, e.g. the paths to datasets and networks.\n    settings.script_name = script_name\n    settings.config_name = config_name\n    settings.project_path = 'train/{}/{}'.format(script_name, config_name)\n    if script_name_prv is not None and config_name_prv is not None:\n        settings.project_path_prv = 'train/{}/{}'.format(script_name_prv, config_name_prv)\n    settings.local_rank = local_rank\n    settings.save_dir = os.path.abspath(save_dir)\n    settings.use_lmdb = use_lmdb\n    prj_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../..\"))\n    settings.cfg_file = os.path.join(prj_dir, 'experiments/%s/%s.yaml' % (script_name, config_name))\n    settings.use_wandb = use_wandb\n\nws_settings.Settings()调用下面这一段函数\n\n    class Settings:\n        \"\"\" Training settings, e.g. the paths to datasets and networks.\"\"\"\n        def __init__(self):\n            self.set_default()\n\n        def set_default(self):\n            self.env = env_settings()\n            self.use_gpu = True\n            \n其中的env_settings()长这样\n\n    def env_settings():\n        env_module_name = 'lib.train.admin.local'\n        try:\n            env_module = importlib.import_module(env_module_name)\n            return env_module.EnvironmentSettings()\n        except:\n            env_file = os.path.join(os.path.dirname(__file__), 'local.py')\n\n        create_default_local_file()\n        raise RuntimeError('YOU HAVE NOT SETUP YOUR local.py!!!\\n Go to \"{}\" and set all the paths you need. Then try to run again.'.format(env_file))\n\n- **dataset & dataloader**\n\n1. **def build_dataloaders(cfg, settings)**:\n    1. Data transform(transform_joint,transform_train,transform_val)\n    2. The tracking pairs processing module(processing.STARKProcessing)\n        1. Apply joint transforms\n        2. 遍历['template', 'search']\n             1. 给中心框添加噪声\n             2. 检查crop_size是否符合规范\n             3. 裁剪抖动后的标签框并且得到注意力掩码（jittered_center_crop）\n                 1. sample_target(裁剪出bbox，大小是search_area_factor^2倍)\n                     1. 得到x,y,w,h\n                     2. 计算裁剪图片大小\n                     3. 计算pad\n                     4. 裁剪图片\n                     5. 处理att_mask(屏蔽padding)\n                     6. 如果有output_size就进行图像大小的调整\n                     7. 返回im_crop_padded, resize_factor, att_mask, mask_crop_padded\n                 2. frames_crop: tuple of ndarray (128,128,3), att_mask: tuple of ndarray (128,128)\n                 3. 转换抖动和gt的bbox的坐标（transform_image_to_crop）\n                 4. 返回frames_crop, box_crop, att_mask, masks_crop\n            4. Apply transforms\n            5. Check whether elements in data[s + '_att'] is all 1\n            6. more strict conditions: require the donwsampled masks not to be all 1\n        3. 返回data\n    3. Train sampler\n        1.  name2datasets获取相应的torch.utils.data.Dataset数据集\n            1. 父类BaseVideoDataset（里面有很多的方法，最重要的还是get_sequence_info和get_frames这两个）\n            2. TrackingSampler他本质上也是一个torch.utils.data.Dataset，真搞不懂为什么要这么继承\n                1.先获取一个数据集中的一个seq，然后检查他的数量是否足够sample_seq_from_dataset\n                2.然后再循环中进行提取\n            3. 然后作者使用了LTRLoader，本质上就是进行了一点小改动，然后就完毕了\n\n** model **\n\n\n\n\n","tags":[],"folderPathname":"/Computer Vision/Track/single_view","data":{},"createdAt":"2023-12-07T02:27:40.866Z","updatedAt":"2024-01-04T08:35:12.748Z","trashed":false,"_rev":"LCWwAT0M5"}