{"_id":"note:E_sb5hWjCG","title":"S4 Model","content":"# Structured State Space sequence model (S4) 论文笔记\n\n>Efficiently Modeling Long Sequences with Structured State Spaces\n\n## 1.Overview\n\n序列建模中的一个中心问题是有效地处理包含远程依赖关系(LRDs)的数据。然后，作者说了一下最近的其他方面的对于该领域的工作，比如CTMS，RNNs，CNNs等领域，然后作者引入了原本运用于控制学领域中的state space model，并说明本文提出了Structured State Space（S4）模型来解决序列模型的难点。\n\n![overview](https://github.com/1248818919/My_NOTE/blob/master/assets/Sequence%20Model/S4%20Model/SSM.jpg?raw=true)\n\n## 2.视频讲解\n    \nhttps://www.youtube.com/watch?v=luCBXCErkCs\n\nSignals:Data generated from a continuous physical process\n\n传统的Seq模型比如说CNN，Attention无法实现EMA的功能，原因是EMA有unbounded context。\n\n![motivation](https://github.com/1248818919/My_NOTE/blob/master/assets/Sequence%20Model/S4%20Model/HiPPO%20motivation.jpg?raw=true)\n\n所以这里作者退一步想想，发现EMA其实是整个signal的一个summary，但是这个特征可以在constant time里面计算：\n\n$x=(1-a)*x+a*u$\n\n我们希望在一个memory budget内压缩前面这一段的input来学习特征，一个很容易想到的方法是用多项式去近似这段input。这个时候，这个多项式的degree就被定义成我们的memory budget。在我们接收到更多signal的时候，我们希望仍然在这个memory budget内对整段signal进行压缩。\n\n这里会涌现出两个问题：\n1. 如何找到这些最优的近似？\n2. 如何快速地更新多项式的参数？\n\n为了解决这两个问题，我们需要更加正式地定义它们。也就是说，我们需要一个measure去定义一个近似的好坏程度。例如，可以使用EDM（Exponential Decaying Measure）：\n\n![Deriving](https://github.com/1248818919/My_NOTE/blob/master/assets/Sequence%20Model/S4%20Model/tuidao.jpg?raw=true)\n\n## 3.State Spaces\n\n状态空间模型由简单的方程$(1)$定义。它将一维输入信号$u(t)$映射到$N-D$潜在状态$x(t)$，然后投影到一维输出信号$y(t)$。以下是连续条件下的状态转移公式：\n\n$x'(t)=Ax(t)+Bu(t)$,$y(t)=Cx(t)+Du(t)$\n\n其中，$x'(t)$表示的是微分，但是在离散化表示下，他代表的是下一个时间的状态。其中$A,B,C,D$都是由梯度下降学习到的，其中$Du$可以看成skip connection，所以论文中有些时候会将其忽略。\n\n然而，实验结果显示上面这个模型表现并不佳，直觉上来看，一种解释是线性一阶ode求解一个指数函数，因此可能会受到梯度在序列长度上的指数缩放的影响。为了解决这个问题，之前的论文引入了HiPPO理论，将A固定为$R^{N×N}$的矩阵。\n\n![HiPPO](https://github.com/1248818919/My_NOTE/blob/master/assets/Sequence%20Model/S4%20Model/HiPPO.jpg?raw=true)","tags":[],"folderPathname":"/Sequence Model","data":{},"createdAt":"2023-12-13T07:51:57.320Z","updatedAt":"2023-12-16T04:02:28.708Z","trashed":false,"_rev":"qNx2N7ua0"}