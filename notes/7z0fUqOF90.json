{"_id":"note:7z0fUqOF90","title":"Control it all from CLI","content":"## Why use a CLI\n\nWhen running deep learning experiments, there are a couple of good practices that are recommended to follow:\n\n- Separate configuration from source code\n\n- Guarantee reproducibility of experiments\n\nImplementing a command line interface (CLI) makes it possible to execute an experiment from a shell terminal. By having a CLI, there is a clear separation between the Python source code and what hyperparameters are used for a particular experiment. If the CLI corresponds to a stable version of the code, reproducing an experiment can be achieved by installing the same version of the code plus dependencies and running with the same configuration (CLI arguments).\n\n## LightningCLI requirements\n\n需要额外再进行安装依赖\n\n    pip install \"lightning[pytorch-extra]\"\n\n或者只对LightningCLI感兴趣，就只用安装\n\n    pip install \"jsonargparse[signatures]\"\n    \n## Implementing a CLI\n\n    # main.py\n    from lightning.pytorch.cli import LightningCLI\n\n    # simple demo classes for your convenience\n    from lightning.pytorch.demos.boring_classes import DemoModel, BoringDataModule\n\n\n    def cli_main():\n        cli = LightningCLI(DemoModel, BoringDataModule)\n        # note: don't call fit!!\n\n\n    if __name__ == \"__main__\":\n        cli_main()\n        # note: it is good practice to implement the CLI in a function and call it in the main if block\n        \n现在可以查看参数\n\n    $ python main.py --help\n\n输出\n\n    usage: main.py [-h] [-c CONFIG] [--print_config [={comments,skip_null,skip_default}+]]\n            {fit,validate,test,predict} ...\n\n    Lightning Trainer command line tool\n\n    optional arguments:\n    -h, --help            Show this help message and exit.\n    -c CONFIG, --config CONFIG\n                            Path to a configuration file in json or yaml format.\n    --print_config [={comments,skip_null,skip_default}+]\n                            Print configuration and exit.\n\n    subcommands:\n    For more details of each subcommand add it as argument followed by --help.\n\n    {fit,validate,test,predict}\n        fit                 Runs the full optimization routine.\n        validate            Perform one evaluation epoch over the validation set.\n        test                Perform one evaluation epoch over the test set.\n        predict             Run inference on your data.\n\n下面命令告诉我们有多少的子命令\n\n    python main.py [subcommand]\n\n输出\n\n    $ python main.py fit\n    $ python main.py validate\n    $ python main.py test\n    $ python main.py predict\n\n## 以训练为例子\n\n    python main.py fit\n\n输出\n\n    $ python main.py fit --help\n\n    usage: main.py [options] fit [-h] [-c CONFIG]\n                                [--seed_everything SEED_EVERYTHING] [--trainer CONFIG]\n                                ...\n                                [--ckpt_path CKPT_PATH]\n        --trainer.logger LOGGER\n\n    optional arguments:\n    <class '__main__.DemoModel'>:\n        --model.out_dim OUT_DIM\n                                (type: int, default: 10)\n        --model.learning_rate LEARNING_RATE\n                                (type: float, default: 0.02)\n    <class 'lightning.pytorch.demos.boring_classes.BoringDataModule'>:\n    --data CONFIG         Path to a configuration file.\n    --data.data_dir DATA_DIR\n                            (type: str, default: ./)\n\n更改相关参数，用命令行的方式\n\n    # change the learning_rate\n    python main.py fit --model.learning_rate 0.1\n\n    # change the output dimensions also\n    python main.py fit --model.out_dim 10 --model.learning_rate 0.1\n\n    # change trainer and data arguments too\n    python main.py fit --model.out_dim 2 --model.learning_rate 0.1 --data.data_dir '~/' --trainer.logger False\n\n> The options that become available in the CLI are the __init__ parameters of the LightningModule and LightningDataModule classes. Thus, to make hyperparameters configurable, just add them to your class’s __init__. It is highly recommended that these parameters are described in the docstring so that the CLI shows them in the help. Also, the parameters should have accurate type hints so that the CLI can fail early and give understandable error messages when incorrect values are given.\n","tags":[],"folderPathname":"/Tutorial/Pytorch_Lightning/Intermediate/Modularize your projects","data":{},"createdAt":"2024-02-22T07:31:20.823Z","updatedAt":"2024-02-22T07:39:09.046Z","trashed":false,"_rev":"nzbNdTjs9"}