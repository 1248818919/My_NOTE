{"_id":"note:65WIri3T5u","title":"Transfer Learning","content":"# TRANSFER LEARNING\n\nLightning支持所有的nn.Module模型，因为LightningModules也是nn.Modules\n\n\n## 1.使用预训练的LightningModule\n\n    class Encoder(torch.nn.Module):\n        ...\n\n\n    class AutoEncoder(LightningModule):\n        def __init__(self):\n            self.encoder = Encoder()\n            self.decoder = Decoder()\n\n\n    class CIFAR10Classifier(LightningModule):\n        def __init__(self):\n            # init the pretrained LightningModule\n            self.feature_extractor = AutoEncoder.load_from_checkpoint(PATH)\n            self.feature_extractor.freeze()\n\n            # the autoencoder outputs a 100-dim representation and CIFAR-10 has 10 classes\n            self.classifier = nn.Linear(100, 10)\n\n        def forward(self, x):\n            representations = self.feature_extractor(x)\n            x = self.classifier(representations)\n            ...\n\n## 示例 Imagenet\n\n    import torchvision.models as models\n\n\n    class ImagenetTransferLearning(LightningModule):\n        def __init__(self):\n            super().__init__()\n\n            # init a pretrained resnet\n            backbone = models.resnet50(weights=\"DEFAULT\")\n            num_filters = backbone.fc.in_features\n            layers = list(backbone.children())[:-1]\n            self.feature_extractor = nn.Sequential(*layers)\n            self.feature_extractor.eval()\n\n            # use the pretrained model to classify cifar-10 (10 image classes)\n            num_target_classes = 10\n            self.classifier = nn.Linear(num_filters, num_target_classes)\n\n        def forward(self, x):\n            with torch.no_grad():\n                representations = self.feature_extractor(x).flatten(1)\n            x = self.classifier(representations)\n            ...\n微调\n\n    model = ImagenetTransferLearning()\n    trainer = Trainer()\n    trainer.fit(model)\n    \n用来推理\n\n    model = ImagenetTransferLearning.load_from_checkpoint(PATH)\n    model.freeze()\n\n    x = some_images_from_cifar10()\n    predictions = model(x)\n    \n## 示例Bert\n\n源码来自这里https://github.com/huggingface/transformers?tab=readme-ov-file\n\n    class BertMNLIFinetuner(LightningModule):\n        def __init__(self):\n            super().__init__()\n\n            self.bert = BertModel.from_pretrained(\"bert-base-cased\", output_attentions=True)\n            self.W = nn.Linear(bert.config.hidden_size, 3)\n            self.num_classes = 3\n\n        def forward(self, input_ids, attention_mask, token_type_ids):\n            h, _, attn = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)\n\n            h_cls = h[:, 0]\n            logits = self.W(h_cls)\n            return logits, attn","tags":[],"folderPathname":"/Tutorial/Pytorch_Lightning/Basic","data":{},"createdAt":"2024-02-22T07:04:07.478Z","updatedAt":"2024-02-22T07:20:00.944Z","trashed":false,"_rev":"PoZKiNkNe"}