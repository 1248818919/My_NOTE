{"_id":"note:rTZ16eTQV2","title":"Validate and test a model","content":"# 添加测试Loop\n\n## 1. 划分训练集和测试集\n\n    import torch.utils.data as data\n    from torchvision import datasets\n    import torchvision.transforms as transforms\n\n    # Load data sets\n    transform = transforms.ToTensor()\n    train_set = datasets.MNIST(root=\"MNIST\", download=True, train=True, transform=transform)\n    test_set = datasets.MNIST(root=\"MNIST\", download=True, train=False, transform=transform)\n\n## 2. 定义测试Loop\n\n    class LitAutoEncoder(L.LightningModule):\n        def training_step(self, batch, batch_idx):\n            ...\n\n        def test_step(self, batch, batch_idx):\n            # this is the test loop\n            x, y = batch\n            x = x.view(x.size(0), -1)\n            z = self.encoder(x)\n            x_hat = self.decoder(z)\n            test_loss = F.mse_loss(x_hat, x)\n            self.log(\"test_loss\", test_loss)\n\n## 3.进行测试\n\n    from torch.utils.data import DataLoader\n\n    # initialize the Trainer\n    trainer = Trainer()\n\n    # test the model\n    trainer.test(model, dataloaders=DataLoader(test_set))\n\n# 添加验证Loop\n\n## 划分训练集和验证集\n\n    # use 20% of training data for validation\n    train_set_size = int(len(train_set) * 0.8)\n    valid_set_size = len(train_set) - train_set_size\n\n    # split the train set into two\n    seed = torch.Generator().manual_seed(42)\n    train_set, valid_set = data.random_split(train_set, [train_set_size, valid_set_size], generator=seed)\n    \n## 定义验证Loop\n\n    class LitAutoEncoder(L.LightningModule):\n        def training_step(self, batch, batch_idx):\n            ...\n\n        def validation_step(self, batch, batch_idx):\n            # this is the validation loop\n            x, y = batch\n            x = x.view(x.size(0), -1)\n            z = self.encoder(x)\n            x_hat = self.decoder(z)\n            val_loss = F.mse_loss(x_hat, x)\n            self.log(\"val_loss\", val_loss)\n\n## 训练\n\n    from torch.utils.data import DataLoader\n\n    train_loader = DataLoader(train_set)\n    valid_loader = DataLoader(valid_set)\n    model = LitAutoEncoder(...)\n\n    # train with both splits\n    trainer = L.Trainer()\n    trainer.fit(model, train_loader, valid_loader)","tags":[],"folderPathname":"/Tutorial/Pytorch_Lightning/Basic/Add a Validation and test set","data":{},"createdAt":"2024-02-22T05:24:47.453Z","updatedAt":"2024-02-22T05:33:24.455Z","trashed":false,"_rev":"lZlalq1L7"}